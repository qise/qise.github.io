<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 起色</title>
    <link>https://qise.github.io/categories/java/</link>
    <description>Recent content in Java on 起色</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 08 Aug 2016 23:16:20 +0800</lastBuildDate>
    <atom:link href="https://qise.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>utf8bm4 java mysql</title>
      <link>https://qise.github.io/utf8bm4-java-mysql/</link>
      <pubDate>Mon, 08 Aug 2016 23:16:20 +0800</pubDate>
      
      <guid>https://qise.github.io/utf8bm4-java-mysql/</guid>
      <description>

&lt;h3 id=&#34;mysql不支持utf-8bm4的java解决方案:73649b4edd83d1fe0c0e3eff642a0acb&#34;&gt;Mysql不支持Utf-8bm4的java解决方案&lt;/h3&gt;

&lt;p&gt;公司的mysql 服务端的版本是5.5.2，但utf8bm4最低支持版本是5.5.3，如果想在文本中存放emoji表情的话，还是需要做一些处理&lt;/p&gt;

&lt;p&gt;由于升级msyql服务端的动作比较大，这里说的解决思路是如何在不升级mysql的情况，让你的应用层兼容utf8bm4，其实这个思路很简单，就是把utf8bm4转换成mysql能支持的字符，我这里的方案是把utf8bm4转换成unicode（因为转成utf8需要8个，unicode只需要5个）的字符串，然后保存字符串&lt;/p&gt;

&lt;p&gt;举个例子：
😂的unicode编码是 U+1F601，utf8的编码是\xF0\x9F\x98\x81，那转换字符串的话只要保存 1f601，只不过为了和正常的字符区分，对转换的unicode进行了简陋的处理，加上首尾特殊符号 ，如[1f601]。
当然这样是比较粗暴的，如果正常的字符中也有这种内容，就被强转成了emoji表情，但是也可以理解为彩蛋啦（说白了就是业务的要求比较低，处理的方式很简陋）。&lt;/p&gt;

&lt;p&gt;再来看一下这种处理方式的代价，原本一个4字节的emoji，现在变成了 [1f601]，假设这里的字符都是1字节的utf8，那么至少需要7个字节，对存储是有一些浪费&lt;/p&gt;

&lt;p&gt;那么在java中要怎么处理呢&lt;/p&gt;

&lt;p&gt;首先需要识别，文本来源是否包含4字节（只处理了4字节，4字节以上也可以用类似思路），如果存在则替换&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    //是否包含4字节以上字符
    public static boolean contains4BytesAbove(String src) {
        if(src == null) return false;
        try {
            byte[] bytes = src.getBytes(&amp;quot;utf-8&amp;quot;);
            for (int i = 0; i &amp;lt; bytes.length; i++) {
                byte b = bytes[i];
                if (b &amp;lt; 0 &amp;amp;&amp;amp; b &amp;gt; -17) {
                    return true;
                }
            }
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return false;
    }

    //byte操作有点粗糙
    public static String marshallUnicode(String src) {
        try {
            List&amp;lt;Byte&amp;gt; bytes = Bytes.asList(src.getBytes(&amp;quot;utf-8&amp;quot;));

            List&amp;lt;Integer&amp;gt; indexList = new ArrayList&amp;lt;&amp;gt;();
            List&amp;lt;String&amp;gt; unicodeList = new ArrayList&amp;lt;&amp;gt;();
            for (int i = 0; i &amp;lt; bytes.size(); i++) {
                byte b = bytes.get(i);
                String str = null;
                //目前只处理了4字节,超过4字节没有验证
                if ((b &amp;amp; 0xF0) == 0xF0) {
                    indexList.add(i);
                    byte[] unicodeBytes = new byte[]{bytes.get(i), bytes.get(i + 1), bytes.get(i + 2), bytes.get(i + 3)};
                    str = new String(unicodeBytes, &amp;quot;utf-8&amp;quot;);
                    i += 3;
                    indexList.add(i);
                } else if ((b &amp;amp; 0xF8) == 0xF8) {
                    indexList.add(i);
    //                str = new String(new byte[]{bytes.get(i), bytes.get(i + 1), bytes.get(i + 2), bytes.get(i + 3), bytes.get(i + 4)}, &amp;quot;utf-8&amp;quot;);
                    str = &amp;quot;?&amp;quot;;
                    i += 4;
                    indexList.add(i);
                } else if ((b &amp;amp; 0xFC) == 0xFC) {
                    indexList.add(i);
    //                str = new String(new byte[]{bytes.get(i), bytes.get(i + 1), bytes.get(i + 2), bytes.get(i + 3), bytes.get(i + 4), bytes.get(i + 5)}, &amp;quot;utf-8&amp;quot;);
                    str = &amp;quot;?&amp;quot;;
                    i += 5;
                    indexList.add(i);
                }
                if (str != null) {
                    String unicode = string2Unicode(str);
                    unicodeList.add(&amp;quot;[&amp;quot; + unicode + &amp;quot;]&amp;quot;);
                }
            }

            int begin = 0;
            List&amp;lt;Byte&amp;gt; resultBytes = Lists.newArrayList();
            for (int i = 0; i &amp;lt; unicodeList.size(); i++) {
                int start = indexList.get(2 * i), end = indexList.get(2 * i + 1);
                resultBytes.addAll(bytes.subList(begin, start));
                byte[] unicode = unicodeList.get(i).getBytes();
                resultBytes.addAll(Bytes.asList(unicode));
                begin = end + 1;
            }
            resultBytes.addAll(bytes.subList(begin, bytes.size()));

            byte[] result = Bytes.toArray(resultBytes);
            return new String(result, &amp;quot;utf-8&amp;quot;);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return src;
    }


    //转换
    public static String string2Unicode(String string) {
        StringBuffer unicode = new StringBuffer();
        int length = string.length();
        int tgt = 0;
        for (int i = 0; i &amp;lt; length; i++) {
            // 取出每一个字符
            char c = string.charAt(i);
            // 转换为unicode
            if (c &amp;lt; 56320 &amp;amp;&amp;amp; 55295 &amp;lt; c &amp;amp;&amp;amp; (i + 1) &amp;lt; length) {
                char d = string.charAt(i + 1);
                if (d &amp;lt; 57344 &amp;amp;&amp;amp; 56319 &amp;lt; d) {
                    tgt = ((c - 55296) * 1024) + (d - 56320) + 65536;
                    i++;
                }
            }
        }
        return Integer.toHexString(tgt);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这里基本上结束了，处理完这个对字符编码又有了更深的认识&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cenalulu.github.io/linux/character-encoding/&#34;&gt;http://cenalulu.github.io/linux/character-encoding/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>